pico-8 cartridge // http://www.pico-8.com
version 8
__lua__
package={loaded={},_c={}}
package._c["gameObject"]=function()
-- Filename: gameObject.lua
-- Purpose: GameObject functions
-- Author: Jeremy Kings

-- Dependencies
require("vec2") -- vec2
local collision = require("collision") -- collisionMapRect
local globals = require("globals") -- pixelsPerUnit

-- Class definition
gameObject = 
{
	-- Transform
	position = vec2:new(0,0),
	extents = vec2:new(0.3,0.4),
	
	-- sprite
	sprite = 0,
	frameCurr = 0,
	frameCount = 2,
	flipX = false,
	
	-- physics
	velocity = vec2:new(0,0),
	inertia = 0.9,
	gravity = 0.1,
	
	-- collision
	grounded = false,
	t = 0,
	bounce = 1,
}

-- Constructor
function gameObject:new(go)
	go = go or {}
	setmetatable(go, self)
	self.__index = self
	return go
end

-- Move and animate an object
function gameObject:update(objects)
	-- ANIMATION
	-- Flip if going other direction
	if abs(self.velocity.x) > 0.1 then
		if self.velocity.x < 0 and not self.flipX then 
			self.flipX = true
		elseif self.velocity.x > 0 and self.flipX then 
			self.flipX = false
		end
	end
	
	-- PHYSICS
	-- only move object along x
	-- if the resulting position
	-- will not overlap with an object
	if not collision.checkAll(self, vec2:new(self.velocity.x, 0), objects) then
		self.position.x += self.velocity.x
	else   
		-- otherwise bounce
		self.velocity.x *= -self.bounce
		--sfx(2)
	end

	-- ditto for y
	--[[if not collision.checkAll(self, vec2:new(0, self.velocity.y), objects) then
		self.position.y += self.velocity.y
	else
		self.velocity.y *= -self.bounce
	end

	-- apply inertia
	-- set dx,dy to zero if you
	-- don't want inertia
	self.velocity = self.velocity:times(self.inertia)
	
	-- apply gravity
	self.grounded = collision.checkMapPoint(vec2:new(self.position.x, self.position.y + 0.5))
	if not grounded then
		self.velocity.y += self.gravity
	end]]
	
	-- y movement
	
	-- going up
	local yMove = vec2:new(0, self.velocity.y)
	local halfExtent = self.extents.x / 2
	local quarterExtent = self.extents.x / 4
	local nudgeDown = 0.01
	local nudgeUp = 0.05
	
	if (self.velocity.y < 0) then
		local leftUp = self.position:plus(vec2:new(-halfExtent, -1))
		local rightUp = self.position:plus(vec2:new(halfExtent, -1))
		
		if collision.checkMapPoint(rightUp:plus(yMove)) or 
				collision.checkMapPoint(leftUp:plus(yMove)) 
		then
			-- Stop y movement
			self.velocity.y = 0
	 
			-- search up for collision point
			while not collision.checkMapPoint(leftUp) or
				collision.checkMapPoint(rightUp)
			do
				self.position.y -= nudgeDown
				leftUp = self.position:plus(vec2:new(-halfExtent, -1))
				rightUp = self.position:plus(vec2:new(halfExtent, -1))
			end

		else
			self.position.y += self.velocity.y
		end
	-- going down
	else
		local leftDown = self.position:plus(vec2:new(-halfExtent, 0))
		local rightDown = self.position:plus(vec2:new(halfExtent, 0))
	
		if collision.checkMapPoint(rightDown:plus(yMove)) or 
				collision.checkMapPoint(leftDown:plus(yMove)) 
		then
			-- bounce
			if self.bounce > 0 and self.velocity.y > halfExtent then
				self.velocity.y -= self.bounce
			else
				self.grounded = true
				self.velocity.y = 0
			end

		--snap down
		while not collision.checkMapPoint(leftDown) or
			collision.checkMapPoint(rightDown)
		do 
			self.position.y += nudgeUp
			leftDown = self.position:plus(vec2:new(-halfExtent, 0))
			rightDown = self.position:plus(vec2:new(halfExtent, 0))
		end

		--pop up even if bouncing
		while collision.checkMapPoint(leftDown:plus(vec2:new(0, -quarterExtent))) do
			self.position.y -= nudgeUp
			leftDown = self.position:plus(vec2:new(-halfExtent, 0))
		end
		while collision.checkMapPoint(rightDown:plus(vec2:new(0, -quarterExtent))) do
			self.position.y -= nudgeUp
			rightDown = self.position:plus(vec2:new(halfExtent, 0))
		end

		else
			self.position.y += self.velocity.y 
		end
	end
 
	-- gravity and friction
	self.velocity.y += self.gravity
	self.velocity.y *= self.inertia + 0.05

	-- x friction
	if self.grounded then
		self.velocity.x *= self.inertia - 0.1
	else
		self.velocity.x *= self.inertia
	end
	
	-- Timer???
	self.t += 1
	
end

-- draw object's sprite
function gameObject:draw()
	local spritePosition = self.position:minus(vec2:new(0.5,0.5)):times(globals.pixelsPerUnit)
	spr(self.sprite + self.frameCurr, spritePosition.x, spritePosition.y, 1, 1, self.flipX)
end
end
package._c["vec2"]=function()
-- Filename: vec2.lua
-- Purpose: 2D vector functions
-- Author: Jeremy Kings

-- Dependencies
-- require("")

-- Class definition
vec2 =
{
	x = 0,
	y = 0,
}

-- Constructor
function vec2:new(x, y)
	v = {}
	setmetatable(v, self)
	self.__index = self
	v.x = x
	v.y = y
	return v
end

-- Operators
function vec2:plus(v1)
	vr = vec2:new(0,0)
	vr.x = self.x + v1.x
	vr.y = self.y + v1.y
	return vr
end

function vec2:minus(v1)
	vr = vec2:new(0,0)
	vr.x = self.x - v1.x
	vr.y = self.y - v1.y
	return vr
end

function vec2:times(s)
	vr = vec2:new(0,0)
	vr.x = self.x * s
	vr.y = self.y * s
	return vr
end

function vec2:dot(v1)
	return self.x * v1.x + self.y * v1.y
end
	
function vec2:lenSq()
	return self.x * self.x + self.y * self.y
end

function vec2:len()
	return sqrt(self:lenSq())
end

function vec2:distSq(v1)
	return self:lenSq(self:sub(v1))
end

function vec2:dist(v1)
	return sqrt(self:distSq(v1))
end
end
package._c["collision"]=function()
-- Filename: collision.lua
-- Purpose: Collision Detection, Resolution
-- Author: Jeremy Kings

-- Dependencies
require("vec2") -- vec2

local collision = {}

-- for any given point on the map, true if there is a wall
function collision.checkMapPoint(position)

	-- grab the cell value
	val = mget(position.x, position.y)

	-- check if flag 1 is set (the
	-- orange toggle button in the 
	-- sprite editor)
	return fget(val, 1)
 
end

-- check if a rectangle overlaps with any walls
--(only works for objects less than one tile big)
function collision.checkMapRect(position, extents)
	return
		collision.checkMapPoint(position:minus(extents)) or
		collision.checkMapPoint(vec2:new(position.x + extents.x, position.y - extents.y)) or
		collision.checkMapPoint(vec2:new(position.x - extents.x, position.y + extents.y)) or
		collision.checkMapPoint(position:plus(extents))
end

-- true if go will hit another
-- object after moving a specific amount
function collision.checkObject(go1, moveAmount, go2)

	local diffStart = go1.position:minus(go2.position)
	local diffEnd = go1.position:plus(moveAmount):minus(go2.position)
	local extSum = go1.extents:plus(go2.extents)
	
	if ((abs(diffEnd.x) < extSum.x) and (abs(diffEnd.y) < extSum.y)) then
		local velSum = go1.velocity:plus(go2.velocity)

		-- moving together?
		-- this allows actors to
		-- overlap initially 
		-- without sticking together    
		if (moveAmount.x != 0 and abs(diffEnd.x) < abs(diffStart.x)) then
			v = velSum.x
			go1.velocity.x = v / 2
			go2.velocity.x = v / 2
			return true 
		end

		if (moveAmount.y != 0 and abs(diffEnd.y) < abs(diffStart.y)) then
			v = velSum.y
			go1.velocity.y = v / 2
			go2.velocity.y = v / 2
			return true 
		end

		return true
	end
	
	return false
end

-- check collision against all other objects
function collision.checkObjectList(go1, moveAmount, objects)
	for go2 in all(objects) do
		if (go2 != go1) then
			if collision.checkObject(go1, moveAmount, go2) then
				return true
			end
		end
	end
	
	return false
end

-- check map and object collisions
function collision.checkAll(go, moveAmount, objects)
	if collision.checkMapRect(go.position:plus(moveAmount), go.extents) then
		return true 
	end
	
	return collision.checkObjectList(go, moveAmount, objects)
end

return collision
end
package._c["globals"]=function()
-- Filename: globals.lua
-- Purpose: Define globals
-- Author: Jeremy Kings

-- Dependencies
--require("")

-- Consts
local globals = {}

globals.pixelsPerUnit = 8 -- Pixels per unit
globals.viewportWidth = 128 -- Viewport width in pixels
globals.mapWidth = 23 -- Map width in units
globals.mapHeight = 13 -- Map height in units

return globals
end
package._c["manager"]=function()
-- Filename: manager.lua
-- Purpose: Manage objects
-- Author: Jeremy Kings

-- Dependencies
require("gameObject") -- gameObjectMove, gameObjectDraw

local manager = {}

-- Array of all objects in world
manager.objects = {}

function manager.add(go)
	add(manager.objects, go)
end

function manager.update()
	for go in all(manager.objects) do
		gameObject.update(go, manager.objects)
	end
end

function manager.draw()
	foreach(manager.objects, gameObject.draw)
end

return manager
end
package._c["input"]=function()
-- Filename: input.lua
-- Purpose: Define inputs
-- Author: Jeremy Kings

-- Dependencies
--require("")

-- Consts
local keys = {}

keys.left = 0
keys.right = 1
keys.up = 2
keys.down = 3

return keys
end
function require(p)
local l=package.loaded
if (l[p]==nil) l[p]=package._c[p]()
if (l[p]==nil) l[p]=true
return l[p]
end
-- Filename: game0
-- Purpose: Game logic
-- Author: Jeremy Kings

-- Dependencies
require("gameObject") -- create
local manager = require("manager") -- update, draw
local keys = require("input") -- keys
local globals = require("globals") -- pixelsPerUnit, viewportWidth, mapWidth, mapHeight

-- Player controller
function playerUpdate()
	-- MOVEMENT
	-- How fast to pick up speed
	local accel = 0.05
	-- Less control in air
	if not player.grounded then 
		accel *= 0.5 
	end
	
	if btn(keys.left) then 
		player.velocity.x -= accel 
	end
	if btn(keys.right) then 
		player.velocity.x += accel 
	end
	
	-- jump
	local jump = -1.0
	if btnp(keys.up) and player.grounded then 
		player.velocity.y += jump
	end
	
	-- ANIMATION
	if player.grounded then
		-- Walking animation
		-- advance one frame every 0.5 units
		if abs(player.velocity.x) > 0.1 then
			player.frameCurr += abs(player.velocity.x) * 2
			player.frameCurr %= player.frameCount
		-- Idle animation (advance every 32 ticks)
		elseif ((player.t % 32) == 0) then
			if(player.frameCurr == 0) then
				player.frameCurr = 2
			else
				player.frameCurr = 0
			end
		end
		
		-- play a sound if moving
		-- (every 8 ticks)
		if abs(player.velocity.x) + abs(player.velocity.y) 
				> 0.1 and (player.t % 8) == 0 then
			sfx(1)
		end
	end
end

function cameraUpdate()
	-- map and actors
	cam_x = mid(0, player.position.x * globals.pixelsPerUnit - (0.5) * globals.viewportWidth, 
		(globals.mapWidth - 3) * 3)

	--cam_y = mid(0,player.y*6-40,128)
	cam_y = 0
	camera (cam_x,cam_y)
end

-- Initialize
function _init()
	-- make player top left
	player = gameObject:new
	{
		position = vec2:new(2, 2), 
		sprite = 17,
	}
	manager.add(player)
	
	-- play level music
	music(0)
	
end

function guiDraw()
	-- fix positions of gui elements
	camera(0, 0)
	print("x "..player.position.x, 0, 120, 7)
	print("y "..player.position.y, 64, 120, 7)
end

-- Update
function _update()
 playerUpdate()
 manager.update()
 cameraUpdate()
end

-- Draw
function _draw()
	cls()
	map(0,0,0,0, globals.mapWidth, globals.mapHeight)
	manager.draw()
	guiDraw()
end
__gfx__
00000000666666661111111111111111000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000
00000000dddddddd1005110110011111101110100303303003033050030330050303305000000000000000000000000000000000000000000000000000000000
00000000555555551111111d11111111000000000033335000333305003333350033330500000000000000000000000000000000000000000000000000000000
0000000011110011110101111011d511000000000337370503373735003737350337373500000000000000000000000000000000000000000000000000000000
00000000111111111111111111111111000000000333330503333335033333050333333500000000000000000000000000000000000000000000000000000000
00000000110001111110010111001001001011010aa333a50aa333a50aa333500aa333a500000000000000000000000000000000000000000000000000000000
000000001111111111111111111111110000000003aaaa0530aaaa5030aaaa0003aaaa5000000000000000000000000000000000000000000000000000000000
00000000111111111111111111111111000000000030005000300300000303000003300000000000000000000000000000000000000000000000000000000000
11111111000110000001100400011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10011d11001c1104001c11040011c104000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
111111110111c1140111c114011c1114000000000000090000000090006000000060000000600000000000000000000000000000000000000000000000000000
1011011100ff7f0400ff7f0f00f7ff04000000000000900000609900000999900009990000099000000000000000000000000000000000000000000000000000
111111110011661f001166140066111f000000000609000000090000006000000060009000600990000000000000000000000000000000000000000000000000
11100111011116140111166401611114000000000090000000060000000000000000000000000000000000000000000000000000000000000000000000000000
111111110111fcc4011fcc140111fcc4000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000
111111111111ccc41111ccc01111ccc4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111111100aaaa000077770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
110011010a0000a007000070000000000000000000c0000000c0000000c0000000c0000000000000000000000000000000000000000000000000000000000000
11111111a000770a7000770700000000000000000c7c00000c7c00000c7c00000cac000000000000000000000000000000000000000000000000000000000000
11510011a000770a700077070000000000000000c7c7c0ccc7c7c0ccc77ac0cccac7c0cc00000000000000000000000000000000000000000000000000000000
11111111a000000a7000000700000000000000000c0c7cac0c07ac7c0cca7c7cc7cc7c7c00000000000000000000000000000000000000000000000000000000
11100111a000000a70000007000000000000000000007ac0000ccac0000cc7c00c00c7c000000000000000000000000000000000000000000000000000000000
111111d10a0000a00700007000000000000000000000cc0000000c0000000c0000000c0000000000000000000000000000000000000000000000000000000000
1111111100aaaa000077770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000bbbb0000bbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000bbbbbb00bbbbbb000000000000000000008888000088880008888800008888800000000000000000000000000000000000000000000000000000000
000000003bbbbbbb3bbbbbbb00000000000000000088999800889998088899980088999800000000000000000000000000000000000000000000000000000000
0000000036b6b6b63b6b6b6b00000000000000000889a9a888899aa88889aaa888899aa800000000000000000000000000000000000000000000000000000000
0000000036b6b6b63b6b6b6b00000000000000008889aaa88889aaa808899aa80889a9a800000000000000000000000000000000000000000000000000000000
0000000033bbbbbb33bbbbbb00000000000000000088999800889998008899980088999800000000000000000000000000000000000000000000000000000000
00000000033bbbb0033bbbb000000000000000000008888800888880000888800008888800000000000000000000000000000000000000000000000000000000
00000000003333000033330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

__gff__
0002020200000000000000000000000002000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
2003020202020220020220020202020202022002020220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000400000320200000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000002020100000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1001010100000004000000000302020100000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000040000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000010001010000000000000000000001010000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000020200400000000000000000003100000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000010100000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1004000000000000202001000000000000000101010120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000400000000000000002010022020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000101010000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000400000000000000002020100000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0301010101010101010101010220200101010101010120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200000c55012540075100050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500
000200003073020750217201171000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700
00100000248002980028800268002480022800218001f8001d8001b80018800188000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010c000007150001000615000100071500010008150001000010000100081500010006150001000010000100071500010013050001001f050001001e050001001f050000001d0501e0501b050000001a05000000
010c000013210000001221000000132100000014210000000000000000142100000012210000000000000000132100000000000000000e2100c2200b2200822007220000000e2100000013210000001721000000
010c00200c1400c1400c142001020010200102131400010213140131420010200102071400714007142001020c1400c1400c14200102001020010213140001021314013142001020010207140071400714200202
010c00201e5411f5411e5401e5411f5401f5401e5401e5411f5421f5421f542005001a5401a54200000000001d5401d5411b5421b541185421854117542175421854218542185421854218545000000000000000
010c002000045000050000500005246150c6000004509600000450460502605006052461500005000000000500045000050000500005246150000500045000050004500005000050000524615000050004500045
010c00200000000000175401754118540185401a5401a541135421354213542005001a5401a542000001b5311d5411d5401b5421b541175421754118542185421b5421b5421b5421b5421b545000000000000000
010c00000714007140071420010200102001020e140001020e1400e1420010200102021400214002142001020c1400c1400c14200102001020010213140001021314013142001020010207140071400714200202
010c00000000000000175401754118540185401a5401a54113542135421a5411a5421854218542175501753118542185421854218542185421854218532185221852218512185121851500000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 04054344
01 06420844
00 06070844
00 0a090844
00 06070844
02 0a0b0844

