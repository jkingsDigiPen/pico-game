pico-8 cartridge // http://www.pico-8.com
version 8
__lua__
package={loaded={},_c={}}
package._c["gameObject"]=function()
-- Filename: gameObject.lua
-- Purpose: GameObject functions
-- Author: Jeremy Kings

-- Dependencies
require("vec2") -- vec2
collision = require("collision") -- collisionMapRect
globals = require("globals") -- pixelsPerUnit

-- Class definition
gameObject = 
{
	-- Transform
	position = vec2:new(0,0),
	extents = vec2:new(0.4,0.4),
	
	-- sprite
	sprite = 0,
	frameCurr = 0,
	frameCount = 2,
	flipX = false,
	
	-- physics
	velocity = vec2:new(0,0),
	inertia = 0.9,
	gravity = 0.05,
	
	-- collision
	flags = 
	{
		bottom = false,
		top = false,
		left = false,
		right = false,
	},
	grounded = false,
	t = 0,
	bounce = 0.8,
}

-- Constructor
function gameObject:new(go)
	go = go or {}
	setmetatable(go, self)
	self.__index = self
	return go
end

-- Move and animate an object
function gameObject:update(objects)
	-- Initialize variables
	local nudgeAmount = 0.55
	local locations =
	{
		bottom = 0,
		top = 0,
		left = 0,
		right = 0,
	}
	
	-- JUMP
	if collision.checkMapRect(self.position:plus(vec2:new(0,nudgeAmount)), self.extents, locations)
	then
		self.grounded = true
	else
		self.grounded = false
	end

	-- COLLISIONS
	self.flags.bottom = false
	self.flags.top = false
	self.flags.left = false
	self.flags.right = false
	
	-- only move object along x if the resulting position will not overlap with an object
	local velocityX = vec2:new(self.velocity.x, 0)
	if collision.checkAll(self, velocityX, locations, objects) then
		if self.velocity.x < 0 then
			self.flags.left = true
			self.position.x = locations.left + self.extents.x + nudgeAmount
		elseif self.velocity.x > 0 then
			self.flags.right = true
			self.position.x = locations.right - self.extents.x - nudgeAmount
		end
	
		-- otherwise bounce
		self.velocity.x *= -self.bounce
		--sfx(2)
	else
		-- Move x as normal
		self.position.x += self.velocity.x
	end

	-- Ditto for y
	local velocityY = vec2:new(0, self.velocity.y)
	if collision.checkAll(self, velocityY, locations, objects) then
		if self.velocity.y < 0 then
			self.flags.top = true
			self.position.y = locations.top + self.extents.y + nudgeAmount
		elseif self.velocity.y > 0 then
			self.flags.bottom = true
			self.grounded = true
			self.position.y = locations.bottom - self.extents.y - nudgeAmount
		end
	
		self.velocity.y *= -self.bounce
	else
		-- Move y as normal
		self.position.y += self.velocity.y
	end
	
	-- Gravity
	self.velocity.y += self.gravity
	
	-- FORCES
	if not self.grounded then
		-- Inertia
		self.velocity = self.velocity:times(self.inertia)
	else
		-- Inertia: more on ground
		self.velocity = self.velocity:times(self.inertia - 0.2)
	end
	
	-- Timer???
	self.t += 1
	
end

-- draw object's sprite
function gameObject:draw()
	local spritePosition = self.position:times(globals.pixelsPerUnit)
	spr(self.sprite + self.frameCurr, spritePosition.x, spritePosition.y, 1, 1, self.flipX)
end
end
package._c["vec2"]=function()
-- Filename: vec2.lua
-- Purpose: 2D vector functions
-- Author: Jeremy Kings

-- Dependencies
-- require("")

-- Class definition
vec2 =
{
	x = 0,
	y = 0,
}

-- Constructor
function vec2:new(x, y)
	v = {}
	setmetatable(v, self)
	self.__index = self
	v.x = x
	v.y = y
	return v
end

-- Operators
function vec2:plus(v1)
	return vec2:new(self.x + v1.x, self.y + v1.y)
end

function vec2:minus(v1)
	return vec2:new(self.x - v1.x, self.y - v1.y)
end

function vec2:times(s)
	return vec2:new(self.x * s, self.y * s)
end

function vec2:negated()
	return vec2:new(-self.x, -self.y)
end

function vec2:dot(v1)
	return self.x * v1.x + self.y * v1.y
end
	
function vec2:lengthSquared()
	return self.x * self.x + self.y * self.y
end

function vec2:length()
	return sqrt(self:lengthSquared())
end

function vec2:distanceSquared(v1)
	return self:minus(v1):lengthSquared()
end

function vec2:distance(v1)
	return sqrt(self:distanceSquared(v1))
end

function vec2:normalized()
	local length = self:length()
	return vec2:new(self.x / length, self.y / length) 
end
end
package._c["collision"]=function()
-- Filename: collision.lua
-- Purpose: Collision Detection, Resolution
-- Author: Jeremy Kings

-- Dependencies
require("vec2") -- vec2

local collision = {}

-- for any given point on the map, true if there is a wall
function collision.checkMapPoint(position)

	-- grab the cell value
	val = mget(position.x, position.y)

	-- check if flag 1 is set (the
	-- orange toggle button in the 
	-- sprite editor)
	return fget(val, 1)
 
end

-- Check if a rectangle overlaps with any walls)
function collision.checkMapRect(position, extents, locations)
	-- Initialize variables
	local result = false
	local infinity = 32000
	locations.left=infinity
	locations.right=-infinity
	locations.top=infinity
	locations.bottom=-infinity
	
	-- Calculate sides of rectangle
	local rectLeft = flr(position.x - extents.x + 0.5)
	local rectRight = flr(position.x + extents.x + 0.5)
	local rectTop = flr(position.y - extents.y + 0.5)
	local rectBottom = flr(position.y + extents.y + 0.5)
	
	-- Determine collision locations
  for i = rectLeft, rectRight do
		for j = rectTop, rectBottom do
			if fget(mget(i,j), 1) then
				locations.left = i < locations.left and i or locations.left
				locations.right = i > locations.right and i or locations.right
				locations.top = j < locations.top and j or locations.top
				locations.bottom = j > locations.bottom and j or locations.bottom
				result = true
			end
		end
  end
  return result
end

-- true if go will hit another
-- object after moving a specific amount
function collision.checkObject(go1, moveAmount, go2)

	local diffStart = go1.position:minus(go2.position)
	local diffEnd = go1.position:plus(moveAmount):minus(go2.position)
	local extSum = go1.extents:plus(go2.extents)
	
	if ((abs(diffEnd.x) < extSum.x) and (abs(diffEnd.y) < extSum.y)) then
		local velSum = go1.velocity:plus(go2.velocity)

		-- moving together?
		-- this allows actors to
		-- overlap initially 
		-- without sticking together    
		if (moveAmount.x != 0 and abs(diffEnd.x) < abs(diffStart.x)) then
			v = velSum.x
			go1.velocity.x = v / 2
			go2.velocity.x = v / 2
			return true 
		end

		if (moveAmount.y != 0 and abs(diffEnd.y) < abs(diffStart.y)) then
			v = velSum.y
			go1.velocity.y = v / 2
			go2.velocity.y = v / 2
			return true 
		end

		return true
	end
	
	return false
end

-- check collision against all other objects
function collision.checkObjectList(go1, moveAmount, objects)
	for go2 in all(objects) do
		if (go2 != go1) then
			if collision.checkObject(go1, moveAmount, go2) then
				return true
			end
		end
	end
	
	return false
end

-- check map and object collisions
function collision.checkAll(go, moveAmount, locations, objects)
	if collision.checkMapRect(go.position:plus(moveAmount), go.extents, locations) then
		return true 
	end
	
	return collision.checkObjectList(go, moveAmount, objects)
end

return collision
end
package._c["globals"]=function()
-- Filename: globals.lua
-- Purpose: Define globals
-- Author: Jeremy Kings

-- Dependencies
--require("")

-- Consts
local globals = {}

globals.pixelsPerUnit = 8 -- Pixels per unit
globals.viewportWidth = 128 -- Viewport width in pixels
globals.mapWidth = 23 -- Map width in units
globals.mapHeight = 13 -- Map height in units

return globals
end
package._c["manager"]=function()
-- Filename: manager.lua
-- Purpose: Manage objects
-- Author: Jeremy Kings

-- Dependencies
require("gameObject") -- gameObjectMove, gameObjectDraw

local manager = {}

-- Array of all objects in world
manager.objects = {}

function manager.add(go)
	add(manager.objects, go)
end

function manager.update()
	for go in all(manager.objects) do
		gameObject.update(go, manager.objects)
	end
end

function manager.draw()
	foreach(manager.objects, gameObject.draw)
end

return manager
end
package._c["input"]=function()
-- Filename: input.lua
-- Purpose: Define inputs
-- Author: Jeremy Kings

-- Dependencies
--require("")

-- Consts
local input = {}

input.keyCodes =
{
	left = 0,
	right = 1,
	up = 2,
	down = 3,
}

input.keyStates = {}

function input.isHeld(k) return band(input.keyStates[k], 1) == 1 end
function input.isPressed(k) return band(input.keyStates[k], 2) == 2 end
function input.isReleased(k) return band(input.keyStates[k], 4) == 4 end

function input.updateKey(k)
    if input.keyStates[k] == 0 then
        if btn(k) then input.keyStates[k] = 3 end
    elseif input.keyStates[k] == 1 then
        if btn(k) == false then input.keyStates[k] = 4 end
    elseif input.keyStates[k] == 3 then
        if btn(k) then input.keyStates[k] = 1
        else input.keyStates[k] = 4 end
    elseif input.keyStates[k] == 4 then
        if btn(k) then input.keyStates[k] = 3
        else input.keyStates[k] = 0 end
    end
end

function input.update()
	for i = 0,5 do input.updateKey(i) end
end

function input.init()
	for i = 0,5 do input.keyStates[i] = 0 end
end

return input
end
function require(p)
local l=package.loaded
if (l[p]==nil) l[p]=package._c[p]()
if (l[p]==nil) l[p]=true
return l[p]
end
-- Filename: game0
-- Purpose: Game logic
-- Author: Jeremy Kings

-- Dependencies
require("gameObject") -- create
manager = require("manager") -- update, draw
input = require("input") -- keys
globals = require("globals") -- pixelsPerUnit, viewportWidth, mapWidth, mapHeight

-- Player controller
function playerUpdate()
	-- MOVEMENT
	-- How fast to pick up speed
	local accel = 0.035
	-- Less control in air
	if not player.grounded then 
		accel *= 0.5 
	end
	
	if input.isHeld(input.keyCodes.left) then 
		player.velocity.x -= accel
		player.flipX = true
	end
	if input.isHeld(input.keyCodes.right) then 
		player.velocity.x += accel
		player.flipX = false
	end
	
	-- jump
	local jump = -0.8
	if input.isPressed(input.keyCodes.up) and player.grounded then 
		player.velocity.y += jump
		player.grounded = false
	end
	
	-- ANIMATION
	if player.grounded then
		-- Walking animation
		-- advance one frame every 0.5 units
		if abs(player.velocity.x) >= 0.07 then
			player.frameCurr += abs(player.velocity.x) * 2
			player.frameCurr %= player.frameCount
		-- Idle animation (advance every 32 ticks)
		elseif ((player.t % 32) == 0) then
			if(player.frameCurr == 0) then
				player.frameCurr = 2
			else
				player.frameCurr = 0
			end
		end
		
		-- play a sound if moving
		-- (every 8 ticks)
		if abs(player.velocity.x) + abs(player.velocity.y) 
				> 0.1 and (player.t % 8) == 0 then
			sfx(1)
		end
	end
end

function cameraUpdate()
	-- map and actors
	cam_x = mid(0, player.position.x * globals.pixelsPerUnit - (0.5) * globals.viewportWidth, 
		(globals.mapWidth - 3) * 3)

	--cam_y = mid(0,player.y*6-40,128)
	cam_y = 0
	camera (cam_x,cam_y)
end

-- Initialize
function _init()
	input.init()

	-- make player top left
	player = gameObject:new
	{
		position = vec2:new(6, 2), 
		sprite = 17,
		bounce = 0,
	}
	manager.add(player)
	
	-- play level music
	music(0)
	
end

function guiDraw()
	-- fix positions of gui elements
	camera(0, 0)
	print("x "..player.position.x, 0, 120, 7)
	print("y "..player.position.y, 64, 120, 7)
	print("dx "..player.velocity.x, 0, 110, 7)
	print("dy "..player.velocity.y, 64, 110, 7)
	local b = player.flags.bottom and 1 or 0
	print("b "..b, 0, 100, 7)
end

-- Update
function _update()
	input.update()
	playerUpdate()
	manager.update()
	cameraUpdate()
end

-- Draw
function _draw()
	cls()
	map(0,0,0,0, globals.mapWidth, globals.mapHeight)
	manager.draw()
	guiDraw()
end
__gfx__
00000000666666661111111111111111000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000
00000000dddddddd1005110110011111101110100303303003033050030330050303305000000000000000000000000000000000000000000000000000000000
00000000555555551111111d11111111000000000033335000333305003333350033330500000000000000000000000000000000000000000000000000000000
0000000011110011110101111011d511000000000337370503373735003737350337373500000000000000000000000000000000000000000000000000000000
00000000111111111111111111111111000000000333330503333335033333050333333500000000000000000000000000000000000000000000000000000000
00000000110001111110010111001001001011010aa333a50aa333a50aa333500aa333a500000000000000000000000000000000000000000000000000000000
000000001111111111111111111111110000000003aaaa0530aaaa5030aaaa0003aaaa5000000000000000000000000000000000000000000000000000000000
00000000111111111111111111111111000000000030005000300300000303000003300000000000000000000000000000000000000000000000000000000000
11111111000110000001100400011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10011d11001c1104001c11040011c104000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
111111110111c1140111c114011c1114000000000000090000000090006000000060000000600000000000000000000000000000000000000000000000000000
1011011100ff7f0400ff7f0f00f7ff04000000000000900000609900000999900009990000099000000000000000000000000000000000000000000000000000
111111110011661f001166140066111f000000000609000000090000006000000060009000600990000000000000000000000000000000000000000000000000
11100111011116140111166401611114000000000090000000060000000000000000000000000000000000000000000000000000000000000000000000000000
111111110111fcc4011fcc140111fcc4000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000
111111111111ccc41111ccc01111ccc4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111111100aaaa000077770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
110011010a0000a007000070000000000000000000c0000000c0000000c0000000c0000000000000000000000000000000000000000000000000000000000000
11111111a000770a7000770700000000000000000c7c00000c7c00000c7c00000cac000000000000000000000000000000000000000000000000000000000000
11510011a000770a700077070000000000000000c7c7c0ccc7c7c0ccc77ac0cccac7c0cc00000000000000000000000000000000000000000000000000000000
11111111a000000a7000000700000000000000000c0c7cac0c07ac7c0cca7c7cc7cc7c7c00000000000000000000000000000000000000000000000000000000
11100111a000000a70000007000000000000000000007ac0000ccac0000cc7c00c00c7c000000000000000000000000000000000000000000000000000000000
111111d10a0000a00700007000000000000000000000cc0000000c0000000c0000000c0000000000000000000000000000000000000000000000000000000000
1111111100aaaa000077770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000bbbb0000bbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000bbbbbb00bbbbbb000000000000000000008888000088880008888800008888800000000000000000000000000000000000000000000000000000000
000000003bbbbbbb3bbbbbbb00000000000000000088999800889998088899980088999800000000000000000000000000000000000000000000000000000000
0000000036b6b6b63b6b6b6b00000000000000000889a9a888899aa88889aaa888899aa800000000000000000000000000000000000000000000000000000000
0000000036b6b6b63b6b6b6b00000000000000008889aaa88889aaa808899aa80889a9a800000000000000000000000000000000000000000000000000000000
0000000033bbbbbb33bbbbbb00000000000000000088999800889998008899980088999800000000000000000000000000000000000000000000000000000000
00000000033bbbb0033bbbb000000000000000000008888800888880000888800008888800000000000000000000000000000000000000000000000000000000
00000000003333000033330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

__gff__
0002020200000000000000000000000002000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
2003020202020220020220020202020202022002020220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000400000320200000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000002020100000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1001010100000004000000000302020100000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000040000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000010001010000000000000000000001010000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000020200400000000000000000003100000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000010100000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1004000000000000202001000000000000000101010120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000400000000000000002010022020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000101010000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000400000000000000002020100000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0301010101010101010101010220200101010101010120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200000c55012540075100050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500
000200003073020750217201171000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700
00100000248002980028800268002480022800218001f8001d8001b80018800188000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010c000007150001000615000100071500010008150001000010000100081500010006150001000010000100071500010013050001001f050001001e050001001f050000001d0501e0501b050000001a05000000
010c000013210000001221000000132100000014210000000000000000142100000012210000000000000000132100000000000000000e2100c2200b2200822007220000000e2100000013210000001721000000
010c00200c1400c1400c142001020010200102131400010213140131420010200102071400714007142001020c1400c1400c14200102001020010213140001021314013142001020010207140071400714200202
010c00201e5411f5411e5401e5411f5401f5401e5401e5411f5421f5421f542005001a5401a54200000000001d5401d5411b5421b541185421854117542175421854218542185421854218545000000000000000
010c002000045000050000500005246150c6000004509600000450460502605006052461500005000000000500045000050000500005246150000500045000050004500005000050000524615000050004500045
010c00200000000000175401754118540185401a5401a541135421354213542005001a5401a542000001b5311d5411d5401b5421b541175421754118542185421b5421b5421b5421b5421b545000000000000000
010c00000714007140071420010200102001020e140001020e1400e1420010200102021400214002142001020c1400c1400c14200102001020010213140001021314013142001020010207140071400714200202
010c00000000000000175401754118540185401a5401a54113542135421a5411a5421854218542175501753118542185421854218542185421854218532185221852218512185121851500000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 04054344
01 06420844
00 06070844
00 0a090844
00 06070844
02 0a0b0844

